# Save by cerecam on 2021_09_01-15.18.39; build 6.14-1 2014_06_04-21.37.49 134264
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=2.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.0), 
    point2=(1.0, 1.0))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='test-sample', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['test-sample'].BaseSolidExtrude(depth=1.0, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].Material(name='soft-tissue')
mdb.models['Model-1'].materials['soft-tissue'].Hyperelastic(materialType=
    ISOTROPIC, table=((1.0, 1.0), ), testData=OFF, type=NEO_HOOKE, 
    volumetricResponse=VOLUMETRIC_DATA)
mdb.models['Model-1'].HomogeneousSolidSection(material='soft-tissue', name=
    'tissue', thickness=None)
mdb.models['Model-1'].parts['test-sample'].Set(cells=
    mdb.models['Model-1'].parts['test-sample'].cells.getSequenceFromMask((
    '[#1 ]', ), ), name='block')
mdb.models['Model-1'].parts['test-sample'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['test-sample'].sets['block'], sectionName=
    'tissue', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='test-sample-1', 
    part=mdb.models['Model-1'].parts['test-sample'])
mdb.models['Model-1'].StaticStep(initialInc=6.0, maxInc=6.0, maxNumInc=1000, 
    minInc=6e-05, name='load', nlgeom=ON, previous='Initial', timePeriod=6.0)
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['test-sample-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), name='x')
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='BC-1', 
    region=mdb.models['Model-1'].rootAssembly.sets['x'], u1=SET, u2=UNSET, u3=
    UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['test-sample-1'].faces.getSequenceFromMask(
    ('[#8 ]', ), ), name='y')
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='BC-2', 
    region=mdb.models['Model-1'].rootAssembly.sets['y'], u1=UNSET, u2=SET, u3=
    UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['test-sample-1'].faces.getSequenceFromMask(
    ('[#20 ]', ), ), name='z')
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='BC-3', 
    region=mdb.models['Model-1'].rootAssembly.sets['z'], u1=UNSET, u2=UNSET, 
    u3=SET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['test-sample-1'].faces.getSequenceFromMask(
    ('[#4 ]', ), ), name='pull')
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='load', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'pull', region=mdb.models['Model-1'].rootAssembly.sets['pull'], u1=0.12, 
    u2=UNSET, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['Model-1'].parts['test-sample'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=1.0)
mdb.models['Model-1'].parts['test-sample'].setElementType(elemTypes=(ElemType(
    elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model-1'].parts['test-sample'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['test-sample'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'cerecam001', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': '/home/cerecam/Benjamin_Alheit/simulations/inverse-fe-example/block/Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'cerecam001', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 6.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 24.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 6.0, 'attempts': 1, 
    'timeIncrement': 6.0, 'increment': 1, 'stepTime': 6.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.models['Model-1'].TimePoint(name='TimePoints-1', points=((0.0, ), (0.2, ), 
    (0.5, ), (6.0, )))
mdb.models['Model-1'].fieldOutputRequests['F-Output-1'].setValues(variables=(
    'S', 'E', 'U', 'RF', 'CF'))
# Save by cerecam on 2021_09_01-15.29.50; build 6.14-1 2014_06_04-21.37.49 134264
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].fieldOutputRequests['F-Output-1'].setValues(timePoint=
    'TimePoints-1')
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'The executable standard aborted with system error code 15. Please check the .dat, .msg, and .sta files for error messages if the files exist.  If there are no error messages and you cannot resolve the problem, please run the command "abaqus job=support information=support" to report and save your system information.  Use the same command to run Abaqus that you used when the problem occurred.  Please contact your local Abaqus support office and send them the input file, the file support.log which you just created, the executable name, and the error code.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'The executable standard aborted with system error code 15. Please check the .dat, .msg, and .sta files for error messages if the files exist.  If there are no error messages and you cannot resolve the problem, please run the command "abaqus job=support information=support" to report and save your system information.  Use the same command to run Abaqus that you used when the problem occurred.  Please contact your local Abaqus support office and send them the input file, the file support.log which you just created, the executable name, and the error code.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].TabularAmplitude(data=((0.0, 0.1), (0.2, 0.3), (6.0, 
    1.0)), name='Amp-1', smooth=SOLVER_DEFAULT, timeSpan=STEP)
mdb.models['Model-1'].boundaryConditions['pull'].setValues(amplitude='Amp-1')
mdb.models['Model-1'].boundaryConditions['pull'].setValues(u2=12.0, u3=13.0)
mdb.models['Model-1'].boundaryConditions['pull'].setValues(ur1=14.0)
mdb.models['Model-1'].fieldOutputRequests['F-Output-1'].setValues(timeMarks=
    OFF)
mdb.models['Model-1'].fieldOutputRequests['F-Output-1'].setValues(timeMarks=ON)
mdb.models['Model-1'].materials['soft-tissue'].hyperelastic.setValues(n=2, 
    table=((1.0, 2.0, 3.0, 4.0, 5.0, 6.0), ), type=OGDEN)
# Save by cerecam on 2021_09_02-08.42.54; build 6.14-1 2014_06_04-21.37.49 134264
